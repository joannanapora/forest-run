[{"/Users/joannanapora/forest-run/src/index.tsx":"1","/Users/joannanapora/forest-run/src/reportWebVitals.ts":"2","/Users/joannanapora/forest-run/src/store-redux/store.ts":"3","/Users/joannanapora/forest-run/src/App.tsx":"4","/Users/joannanapora/forest-run/src/store-redux/root-reducer.ts":"5","/Users/joannanapora/forest-run/src/App.styles.ts":"6","/Users/joannanapora/forest-run/src/nav/menu-drawer/menu-drawer.container.tsx":"7","/Users/joannanapora/forest-run/src/store-redux/nav/nav.reducer.ts":"8","/Users/joannanapora/forest-run/src/store-redux/user/user.reducer.ts":"9","/Users/joannanapora/forest-run/src/nav/menu-drawer/menu-drawer.styles.ts":"10","/Users/joannanapora/forest-run/src/store-redux/user/user.selectors.ts":"11","/Users/joannanapora/forest-run/src/store-redux/nav/nav.selectors.ts":"12","/Users/joannanapora/forest-run/src/nav/user-area/user-area.container.tsx":"13","/Users/joannanapora/forest-run/src/pages/donate/donate.component.tsx":"14","/Users/joannanapora/forest-run/src/pages/manage/manage.component.tsx":"15","/Users/joannanapora/forest-run/src/pages/manage/delete-post/delete-post.container.tsx":"16","/Users/joannanapora/forest-run/src/pages/manage/create-event/create-event.container.tsx":"17","/Users/joannanapora/forest-run/src/pages/notice-board/articles/notice-board.container.tsx":"18","/Users/joannanapora/forest-run/src/pages/manage/delete-event/delete-event.container.tsx":"19","/Users/joannanapora/forest-run/src/pages/events/event-card/event.component.tsx":"20","/Users/joannanapora/forest-run/src/pages/login/sign-in-sign-up/sign-in-up.component.tsx":"21","/Users/joannanapora/forest-run/src/pages/manage/create-post/create-post.container.tsx":"22","/Users/joannanapora/forest-run/src/pages/events/event-list/event-list.component.tsx":"23","/Users/joannanapora/forest-run/src/pages/landing/timelines/timelines.component.tsx":"24","/Users/joannanapora/forest-run/src/store-redux/user/user.types.ts":"25","/Users/joannanapora/forest-run/src/store-redux/index.ts":"26","/Users/joannanapora/forest-run/src/pages/landing/timelines/timelines.styles.ts":"27","/Users/joannanapora/forest-run/src/grapQL/user/user.mutation.ts":"28","/Users/joannanapora/forest-run/src/shared/spinner.component.tsx":"29","/Users/joannanapora/forest-run/src/store-redux/user/user.actions.ts":"30","/Users/joannanapora/forest-run/src/grapQL/index.ts":"31","/Users/joannanapora/forest-run/src/grapQL/event/event.query.ts":"32","/Users/joannanapora/forest-run/src/grapQL/event/event.mutation.ts":"33","/Users/joannanapora/forest-run/src/grapQL/post/post.query.tsx":"34","/Users/joannanapora/forest-run/src/grapQL/user/user.graphql.ts":"35","/Users/joannanapora/forest-run/src/grapQL/post/post.mutation.ts":"36","/Users/joannanapora/forest-run/src/pages/events/event-list/event-list.styles.ts":"37","/Users/joannanapora/forest-run/src/pages/login/sign-in-sign-up/sign-in-up.styles.ts":"38","/Users/joannanapora/forest-run/src/pages/manage/create-post/create-post.styles.ts":"39","/Users/joannanapora/forest-run/src/models/when.enum.ts":"40","/Users/joannanapora/forest-run/src/axios/image.api.ts":"41","/Users/joannanapora/forest-run/src/pages/events/event-card/event.styles.tsx":"42","/Users/joannanapora/forest-run/src/shared/spinner-button.component.tsx":"43","/Users/joannanapora/forest-run/src/pages/login/sign-up/sign-up.container.tsx":"44","/Users/joannanapora/forest-run/src/pages/login/sign-in/sign-in.container.tsx":"45","/Users/joannanapora/forest-run/src/pages/manage/delete-event/delete-event.styles.ts":"46","/Users/joannanapora/forest-run/src/pages/notice-board/articles/notice-board.styles.ts":"47","/Users/joannanapora/forest-run/src/pages/manage/create-event/create-event.styles.ts":"48","/Users/joannanapora/forest-run/src/pages/manage/delete-post/delete-post.styles.ts":"49","/Users/joannanapora/forest-run/src/pages/manage/manage.styles.ts":"50","/Users/joannanapora/forest-run/src/pages/donate/donate.styles.ts":"51","/Users/joannanapora/forest-run/src/pages/notice-board/search-post/search-post.component.tsx":"52","/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-image/event-image.component.tsx":"53","/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-meetpoint/event-details.component.tsx":"54","/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-details/event-info.component.tsx":"55","/Users/joannanapora/forest-run/src/stripe/stripe.component.tsx":"56","/Users/joannanapora/forest-run/src/pages/login/sign-in/sign-in.styles.ts":"57","/Users/joannanapora/forest-run/src/shared/email-validation.ts":"58","/Users/joannanapora/forest-run/src/pages/login/sign-up/sign-up.styles.ts":"59","/Users/joannanapora/forest-run/src/shared/password-validation.ts":"60","/Users/joannanapora/forest-run/src/nav/user-area/user-area.styles.ts":"61","/Users/joannanapora/forest-run/src/pages/notice-board/search-post/search-post.styles.ts":"62","/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-details/event-info.styles.ts":"63","/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-meetpoint/event-details.styles.ts":"64","/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-image/event-image.styles.ts":"65"},{"size":1278,"mtime":1614349874529,"results":"66","hashOfConfig":"67"},{"size":425,"mtime":1614349874551,"results":"68","hashOfConfig":"67"},{"size":307,"mtime":1614349874556,"results":"69","hashOfConfig":"67"},{"size":300,"mtime":1614349874524,"results":"70","hashOfConfig":"67"},{"size":461,"mtime":1614349874556,"results":"71","hashOfConfig":"67"},{"size":164,"mtime":1614349874524,"results":"72","hashOfConfig":"67"},{"size":6528,"mtime":1614349874530,"results":"73","hashOfConfig":"67"},{"size":953,"mtime":1614349874555,"results":"74","hashOfConfig":"67"},{"size":527,"mtime":1614349874557,"results":"75","hashOfConfig":"67"},{"size":2485,"mtime":1614349874530,"results":"76","hashOfConfig":"67"},{"size":184,"mtime":1614349874557,"results":"77","hashOfConfig":"67"},{"size":169,"mtime":1614349874555,"results":"78","hashOfConfig":"67"},{"size":5600,"mtime":1614349874531,"results":"79","hashOfConfig":"67"},{"size":2845,"mtime":1614349874532,"results":"80","hashOfConfig":"67"},{"size":3411,"mtime":1614349874548,"results":"81","hashOfConfig":"67"},{"size":9524,"mtime":1614349874547,"results":"82","hashOfConfig":"67"},{"size":15694,"mtime":1614349874541,"results":"83","hashOfConfig":"67"},{"size":3557,"mtime":1614350724106,"results":"84","hashOfConfig":"67"},{"size":9108,"mtime":1614349874546,"results":"85","hashOfConfig":"67"},{"size":3191,"mtime":1614349874533,"results":"86","hashOfConfig":"67"},{"size":1007,"mtime":1614349874538,"results":"87","hashOfConfig":"67"},{"size":8795,"mtime":1614350546559,"results":"88","hashOfConfig":"67"},{"size":11804,"mtime":1614350820990,"results":"89","hashOfConfig":"67"},{"size":3825,"mtime":1614349874535,"results":"90","hashOfConfig":"67"},{"size":76,"mtime":1614349874558,"results":"91","hashOfConfig":"67"},{"size":108,"mtime":1614349874555,"results":"92","hashOfConfig":"67"},{"size":242,"mtime":1614349874536,"results":"93","hashOfConfig":"67"},{"size":247,"mtime":1614349874528,"results":"94","hashOfConfig":"67"},{"size":753,"mtime":1614349874554,"results":"95","hashOfConfig":"67"},{"size":180,"mtime":1614349874557,"results":"96","hashOfConfig":"67"},{"size":226,"mtime":1614349874526,"results":"97","hashOfConfig":"67"},{"size":439,"mtime":1614349874526,"results":"98","hashOfConfig":"67"},{"size":1433,"mtime":1614349874526,"results":"99","hashOfConfig":"67"},{"size":326,"mtime":1614349874527,"results":"100","hashOfConfig":"67"},{"size":587,"mtime":1614349874528,"results":"101","hashOfConfig":"67"},{"size":664,"mtime":1614349874527,"results":"102","hashOfConfig":"67"},{"size":1524,"mtime":1614349874534,"results":"103","hashOfConfig":"67"},{"size":1728,"mtime":1614349874538,"results":"104","hashOfConfig":"67"},{"size":3923,"mtime":1614349874546,"results":"105","hashOfConfig":"67"},{"size":1554,"mtime":1614349874529,"results":"106","hashOfConfig":"67"},{"size":400,"mtime":1614349874525,"results":"107","hashOfConfig":"67"},{"size":973,"mtime":1614349874533,"results":"108","hashOfConfig":"67"},{"size":1599,"mtime":1614349874553,"results":"109","hashOfConfig":"67"},{"size":11256,"mtime":1614349874540,"results":"110","hashOfConfig":"67"},{"size":5228,"mtime":1614349874539,"results":"111","hashOfConfig":"67"},{"size":2092,"mtime":1614349874547,"results":"112","hashOfConfig":"67"},{"size":2393,"mtime":1614349874549,"results":"113","hashOfConfig":"67"},{"size":1939,"mtime":1614349874542,"results":"114","hashOfConfig":"67"},{"size":2225,"mtime":1614349874547,"results":"115","hashOfConfig":"67"},{"size":2604,"mtime":1614349874548,"results":"116","hashOfConfig":"67"},{"size":1139,"mtime":1614349874532,"results":"117","hashOfConfig":"67"},{"size":575,"mtime":1614349874550,"results":"118","hashOfConfig":"67"},{"size":1171,"mtime":1614351216536,"results":"119","hashOfConfig":"67"},{"size":1524,"mtime":1614349874545,"results":"120","hashOfConfig":"67"},{"size":4282,"mtime":1614349874543,"results":"121","hashOfConfig":"67"},{"size":755,"mtime":1614349874558,"results":"122","hashOfConfig":"67"},{"size":888,"mtime":1614349874539,"results":"123","hashOfConfig":"67"},{"size":280,"mtime":1614349874551,"results":"124","hashOfConfig":"67"},{"size":465,"mtime":1614349874540,"results":"125","hashOfConfig":"67"},{"size":197,"mtime":1614349874552,"results":"126","hashOfConfig":"67"},{"size":658,"mtime":1614349874531,"results":"127","hashOfConfig":"67"},{"size":414,"mtime":1614349874550,"results":"128","hashOfConfig":"67"},{"size":984,"mtime":1614349874543,"results":"129","hashOfConfig":"67"},{"size":518,"mtime":1614349874545,"results":"130","hashOfConfig":"67"},{"size":627,"mtime":1614349874544,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"3t1ldg",{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"134"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"134"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"134"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"134"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"134"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"134"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"/Users/joannanapora/forest-run/src/index.tsx",[],["269","270"],"/Users/joannanapora/forest-run/src/reportWebVitals.ts",[],"/Users/joannanapora/forest-run/src/store-redux/store.ts",[],"/Users/joannanapora/forest-run/src/App.tsx",[],"/Users/joannanapora/forest-run/src/store-redux/root-reducer.ts",[],"/Users/joannanapora/forest-run/src/App.styles.ts",[],"/Users/joannanapora/forest-run/src/nav/menu-drawer/menu-drawer.container.tsx",[],"/Users/joannanapora/forest-run/src/store-redux/nav/nav.reducer.ts",[],"/Users/joannanapora/forest-run/src/store-redux/user/user.reducer.ts",[],"/Users/joannanapora/forest-run/src/nav/menu-drawer/menu-drawer.styles.ts",[],"/Users/joannanapora/forest-run/src/store-redux/user/user.selectors.ts",[],"/Users/joannanapora/forest-run/src/store-redux/nav/nav.selectors.ts",[],"/Users/joannanapora/forest-run/src/nav/user-area/user-area.container.tsx",[],"/Users/joannanapora/forest-run/src/pages/donate/donate.component.tsx",[],"/Users/joannanapora/forest-run/src/pages/manage/manage.component.tsx",[],"/Users/joannanapora/forest-run/src/pages/manage/delete-post/delete-post.container.tsx",["271"],"import React, { Dispatch, SetStateAction, useState, useEffect } from 'react';\n\nimport { useDeletePostStyles } from './delete-post.styles';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Button, Typography } from '@material-ui/core';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withRouter } from 'react-router-dom';\nimport Modal from '@material-ui/core/Modal';\nimport Alert from '@material-ui/lab/Alert';\nimport CircularIndeterminate from '../../../shared/spinner.component';\n\nimport { DELETE_POST, GET_POSTS } from '../../../grapQL';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\nimport { format } from 'date-fns';\n\ninterface IAllAlerts {\n    postDeleted: boolean;\n    internalBackendError: boolean;\n    pleaseLogIn: boolean;\n}\n\n\nconst DeletePost = ({ history }) => {\n    const classes = useDeletePostStyles();\n    const [articleState, setArticleStateState] = useState(null);\n    const [modalStyle] = useState(getModalStyle);\n    const [openModal, setOpenModal]: [boolean, Dispatch<SetStateAction<boolean>>] = useState(false);\n    const [alert, setAlert]: [IAllAlerts, Dispatch<SetStateAction<IAllAlerts>>] = useState(\n        {\n            internalBackendError: false,\n            pleaseLogIn: false,\n            postDeleted: false,\n        }\n    );\n\n    useEffect(() => {\n        refetch()\n    }, []);\n\n\n    const { loading, error, data, refetch } = useQuery(GET_POSTS, {\n        variables: {\n            filters: {\n                me: true,\n                phrase: \"\",\n            }\n        },\n        onCompleted: (result) => {\n            let articlesStateObj = {};\n\n            result.posts.forEach(post => {\n                articlesStateObj[post.id] = false;\n            });\n\n            setArticleStateState(articlesStateObj);\n        },\n        onError: (e) => {\n            if ((e.graphQLErrors[0].message as any).statusCode === 500) {\n                setAlert({ ...alert, internalBackendError: true });\n            }\n            if ((e.graphQLErrors[0].message) === \"Cannot read property 'sub' of undefined\") {\n                setAlert({ ...alert, pleaseLogIn: true })\n            }\n        }\n    });\n\n\n    const [deletePost] = useMutation(DELETE_POST, {\n        onError: (e) => {\n            if ((e.graphQLErrors[0].message as any).statusCode === 500) {\n                setAlert({ ...alert, internalBackendError: true });\n            }\n            if ((e.graphQLErrors[0].message) === \"Cannot read property 'sub' of undefined\") {\n                setAlert({ ...alert, pleaseLogIn: true })\n            }\n        },\n        onCompleted: () => {\n            setOpenModal(false);\n            refetch();\n            setAlert({ ...alert, postDeleted: true })\n        }\n    });\n\n    if (error) {\n        return (\n            <div className={classes.alert}><Alert severity=\"error\">Ooops! Try again later.</Alert></div>)\n    }\n\n    const handleYes = () => {\n        let listOfObjectsToDelete = [];\n\n        for (const postId in articleState) {\n            if (articleState[postId] === true) {\n                listOfObjectsToDelete.push(postId);\n            }\n        }\n        deletePost(\n            {\n                variables: {\n                    ids: listOfObjectsToDelete\n                },\n                refetchQueries: [{\n                    query: GET_POSTS,\n                    variables: {\n                        filters: {\n                            me: false,\n                            phrase: \"\"\n                        }\n                    }\n                }],\n            }\n        );\n    };\n    const handleNo = () => {\n        setOpenModal(false);\n    };\n\n    const redirectToManage = () => {\n        if (history) {\n            history.push('/manage/')\n        }\n    };\n\n    const handleModalClose = () => {\n        setOpenModal(false);\n    };\n\n\n    const bodyConfirmDelete = (\n        <div style={modalStyle} className={classes.paper}>\n            <Typography>Are you sure you want to delete?</Typography>\n            <div className={classes.confirmButtons}>\n                <Button\n                    onClick={handleNo}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    className={classes.button}\n                >\n                    No\n      </Button>\n                <Button\n                    onClick={handleYes}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    className={classes.button}\n                >\n                    Yes\n      </Button>\n            </div>\n        </div>\n    );\n\n    function rand() {\n        return Math.round(Math.random() * 20) - 10;\n    };\n\n    function getModalStyle() {\n        const top = 50 + rand();\n        const left = 50 + rand();\n\n        return {\n            top: `${top}%`,\n            left: `${left}%`,\n            transform: `translate(-${top}%, -${left}%)`,\n        };\n    };\n\n\n    const handleDeleteButton = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setOpenModal(true);\n    };\n\n\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>, id: string) => {\n        setArticleStateState({ ...articleState, [id]: event.target.checked });\n    };\n\n    let checkIfDisableButton = true;\n\n    for (const postId in articleState) {\n        if (articleState[postId] === true) {\n            checkIfDisableButton = false\n        }\n    }\n\n    return (\n        <div className={classes.container} >\n            <Button\n                onClick={redirectToManage}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"medium\"\n                className={classes.buttonBack}\n                startIcon={< ArrowBackIcon />}\n            >\n                Back\n      </Button>\n            {\n                !data || loading ?\n                    <CircularIndeterminate />\n                    :\n                    <div className={classes.checkboxes}>\n                        {alert.internalBackendError ? (\n                            <Alert severity=\"error\">Ooops! Something went wrong, try again later.</Alert>\n                        ) : null}\n                        {alert.pleaseLogIn ? (\n                            <Alert severity=\"warning\">Please log in to delete event.</Alert>\n                        ) : null}\n                        {alert.postDeleted ? (\n                            <Alert severity=\"success\">Post/s has been deleted.</Alert>\n                        ) : null}\n                        <FormGroup>\n                            {\n                                data?.posts.length < 1 ?\n                                    <div className={classes.noPosts}>There are no posts.</div>\n                                    :\n                                    null\n                            }\n                            {\n                                articleState ?\n                                    data?.posts?.map((post) => {\n                                        return (\n                                            <FormControlLabel key={post.id}\n                                                control={\n                                                    <Checkbox\n                                                        checked={articleState[post.id]}\n                                                        onChange={(e) => handleChange(e, post.id)}\n                                                        name={post.id}\n                                                        color=\"primary\"\n                                                    />\n                                                }\n\n                                                label={\n                                                    <div className={classes.articlesFormLabel}>\n                                                        <div className={classes.date}>\n                                                            {format(new Date(post.dateCreated), 'dd/MM/yyyy')}\n                                                        </div>\n                                                        <div>\n                                                            {post.title}\n                                                        </div>\n                                                    </div>\n                                                }\n\n                                            />\n                                        )\n                                    }) : null\n                            }\n                        </FormGroup>\n                    </div>}\n            <Button\n                onClick={handleDeleteButton}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n                disabled={data?.posts.length < 1 || checkIfDisableButton}\n            >\n                DELETE\n      </Button>\n            <Modal\n                open={openModal}\n                onClose={handleModalClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {bodyConfirmDelete}\n            </Modal>\n        </div>\n    )\n};\n\nexport default withRouter(DeletePost);","/Users/joannanapora/forest-run/src/pages/manage/create-event/create-event.container.tsx",["272"],"import React, { Dispatch, SetStateAction, useState } from 'react';\n\nimport { useCreateEventStyles } from './create-event.styles';\n\nimport MeetingPoint from './new-event/event-meetpoint/event-details.component';\nimport UploudEventImage from './new-event/event-image/event-image.component';\nimport EventDetails from './new-event/event-details/event-info.component';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport Typography from '@material-ui/core/Typography';\nimport Stepper from '@material-ui/core/Stepper';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport Alert from '@material-ui/lab/Alert';\nimport Step from '@material-ui/core/Step';\n\nimport { mapOptionsToWhen } from '../../../models/when.enum';\n\nimport { Paper, StepContent, StepLabel } from '@material-ui/core';\n\nimport { useMutation } from '@apollo/react-hooks';\nimport { postImage } from '../../../axios/image.api';\nimport { CREATE_EVENT, GET_EVENTS } from '../../../grapQL';\n\nfunction getSteps() {\n    return ['Set up event details', 'Meeting place and Event description', 'Upload Event Image'];\n}\n\ninterface Notifications {\n    internalBackendError: boolean;\n    dateInPast: boolean;\n    missedInputs: {\n        emptyWhen: boolean;\n        emptyLocation: boolean;\n        emptyDate: boolean;\n        emptyDistance: boolean;\n        emptyTime: boolean;\n    };\n    eventCreated: boolean;\n    pleaseLogin: boolean;\n}\n\ninterface IAllEventDetails {\n    organizerName: string;\n    organizerPhoneNumber: string;\n    meetingPoint: string;\n    eventDescription: string;\n    location: string;\n    when: string;\n    distance: string;\n    image: File;\n}\n\nconst CreateEvent = ({ history }) => {\n    const classes = useCreateEventStyles();\n    const [activeStep, setActiveStep]: [number, Dispatch<SetStateAction<number>>] = useState(0);\n    const [openModal, setOpenModal]: [boolean, Dispatch<SetStateAction<boolean>>] = useState(false);\n    const [imageLoading, setImageLoading]: [boolean, Dispatch<SetStateAction<boolean>>] = useState(false);\n    const [imgid, setImageId]: [string, Dispatch<SetStateAction<string>>] = useState(\"\");\n    const [alert, setAlert]: [Notifications, Dispatch<SetStateAction<Notifications>>] = useState({\n        internalBackendError: false,\n        dateInPast: false,\n        missedInputs: {\n            emptyWhen: false,\n            emptyLocation: false,\n            emptyDate: false,\n            emptyDistance: false,\n            emptyTime: false,\n        },\n        eventCreated: false,\n        pleaseLogin: false,\n    });\n\n    const [allDetails, setAllDetails]: [IAllEventDetails, Dispatch<SetStateAction<IAllEventDetails>>] = useState({\n        organizerName: '',\n        organizerPhoneNumber: '',\n        meetingPoint: '',\n        eventDescription: '',\n        location: '',\n        when: '',\n        distance: '',\n        image: null,\n    })\n\n    const calenderDate = new Date();\n    const newDate = calenderDate.setDate(calenderDate.getDate() + 1)\n    const [modalStyle] = useState(getModalStyle);\n    const [dateValue, changeDate] = useState(new Date(newDate));\n    const [timeValue, changeTime] = useState(new Date());\n\n    const [createEvent] = useMutation(CREATE_EVENT, {\n        onCompleted: () => {\n            setAlert({ ...alert, eventCreated: true });\n        },\n        onError: (error) => {\n            if ((error.graphQLErrors[0].message as any).statusCode === 500) {\n                setAlert({ ...alert, internalBackendError: true });\n            }\n            if ((error.graphQLErrors[0].message as any).statusCode === 400) {\n                if ((error.graphQLErrors[0].message as any).message === \"date-in-past\") {\n                    setAlert({ ...alert, dateInPast: true });\n                }\n            }\n            if ((error.graphQLErrors[0].message) === \"Cannot read property 'sub' of undefined\") {\n                setAlert({ ...alert, pleaseLogin: true })\n            }\n        }\n    });\n\n    const handleDetailChange = (prop) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        setAlert({\n            missedInputs: {\n                emptyWhen: false,\n                emptyLocation: false,\n                emptyDate: false,\n                emptyDistance: false,\n                emptyTime: false\n            },\n            eventCreated: false,\n            internalBackendError: false,\n            dateInPast: false,\n            pleaseLogin: false,\n        });\n        if (prop === 'image') {\n            setImageLoading(true)\n            postImage(event.target.files[0])\n                .then((result) => {\n                    setAllDetails({ ...allDetails, image: event.target.files[0] });\n                    setImageId(result.data.id);\n                    setImageLoading(false)\n                })\n        }\n        if (prop === 'distance' && event.target.value.length > 5) {\n            setAllDetails({ ...allDetails, distance: event.target.value.slice(0, -1) });\n        }\n        if (prop === 'distance' && event.target.value === '0') {\n            setAllDetails({ ...allDetails, distance: '1' });\n        }\n        if (prop === 'distance' && Number(event.target.value) < 0) {\n            setAllDetails({ ...allDetails, distance: (Number(event.target.value) * -1).toString() });\n        }\n        else {\n            setAllDetails({ ...allDetails, [prop]: event.target.value });\n        }\n    };\n\n\n\n    const handleValidation = (): boolean => {\n        const newDate = new Date();\n        if (allDetails.when === '') {\n            setAlert({ ...alert, missedInputs: { ...alert.missedInputs, emptyWhen: true } });\n            return false;\n        }\n        if (timeValue === null) {\n            setAlert({ ...alert, missedInputs: { ...alert.missedInputs, emptyTime: true } });\n            return false;\n        }\n        if (allDetails.location === '') {\n            setAlert({ ...alert, missedInputs: { ...alert.missedInputs, emptyLocation: true } });\n            return false;\n        }\n        if (allDetails.distance === '') {\n            setAlert({ ...alert, missedInputs: { ...alert.missedInputs, emptyDistance: true } });\n            return false;\n        }\n        if (dateValue === null && allDetails.when === 'one time event') {\n            setAlert({ ...alert, missedInputs: { ...alert.missedInputs, emptyDate: true } });\n            return false;\n        }\n        if (dateValue)\n\n            return true;\n    };\n\n\n\n    function getStepContent(step: number) {\n        switch (step) {\n            case 0:\n                return (\n                    <EventDetails\n                        dateValue={dateValue}\n                        timeValue={timeValue}\n                        locationValue={allDetails.location}\n                        distanceValue={allDetails.distance}\n                        whenValue={allDetails.when}\n                        changeWhen={handleDetailChange('when')}\n                        changeDistance={handleDetailChange('distance')}\n                        changeLocation={handleDetailChange('location')}\n                        changeDate={changeDate}\n                        changeTime={changeTime}\n                        distanceRequiredAlert={alert.missedInputs.emptyDistance}\n                        dateRequiredAlert={alert.missedInputs.emptyDate}\n                        timeRequiredAlert={alert.missedInputs.emptyTime}\n                        whenRequiredAlert={alert.missedInputs.emptyWhen}\n                        locationRequiredAlert={alert.missedInputs.emptyLocation}\n                    />\n                );\n            case 1:\n                return (\n                    <MeetingPoint\n                        changeOrganizerName={handleDetailChange('organizerName')}\n                        changeOrganizerPhoneNumber={handleDetailChange('organizerPhoneNumber')}\n                        changeMeetingPoint={handleDetailChange('meetingPoint')}\n                        changeEventDescription={handleDetailChange('eventDescription')}\n                        organizerNameValue={allDetails.organizerName}\n                        organizerPhoneNumberValue={allDetails.organizerPhoneNumber}\n                        meetingPointValue={allDetails.meetingPoint}\n                        eventDescriptionValue={allDetails.eventDescription} />\n                );\n            case 2:\n                return (\n                    <UploudEventImage\n                        onImageUpload={handleDetailChange('image')}\n                        imageValue={allDetails.image}\n                        imageLoading={imageLoading}\n                    />\n\n                );\n            default:\n                return 'Unknown step';\n        }\n    }\n\n    const steps = getSteps();\n\n\n    function rand() {\n        return Math.round(Math.random() * 20) - 10;\n    }\n\n    function getModalStyle() {\n        const top = 50 + rand();\n        const left = 50 + rand();\n\n        return {\n            top: `${top}%`,\n            left: `${left}%`,\n            transform: `translate(-${top}%, -${left}%)`,\n        };\n    }\n\n    const handleModalNo = () => {\n        setOpenModal(false);\n    }\n\n    const handleModalYes = () => {\n        setOpenModal(false);\n        setActiveStep(0);\n    }\n\n    const redirectToManage = () => {\n        if (history) {\n            history.push('/manage')\n        }\n    };\n\n    const handleModalClose = () => {\n        setOpenModal(false);\n    };\n\n    const handleNext = () => {\n        const isValidate = handleValidation();\n        if (isValidate) {\n            setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }\n    };\n\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n\n    const handleReset = () => {\n        setOpenModal(true);\n    };\n\n    const handleSubmit = () => {\n        createEvent(\n            {\n                variables: {\n                    when: mapOptionsToWhen(allDetails.when),\n                    ...mapOptionsToWhen(allDetails.when) === 0 && { date: dateValue.toISOString() },\n                    time: timeValue.toISOString(),\n                    location: allDetails.location,\n                    distance: Number(allDetails.distance),\n                    organizerName: allDetails.organizerName,\n                    organizerPhoneNumber: allDetails.organizerPhoneNumber,\n                    meetingPoint: allDetails.meetingPoint,\n                    description: allDetails.eventDescription,\n                    ...!!imgid && { imageId: imgid }\n                },\n                refetchQueries: [{\n                    query: GET_EVENTS,\n                    variables: {\n                        filters: {\n                            me: false,\n                            participateCounter: undefined,\n                            distance: undefined,\n                            joined: false,\n                        }\n                    }\n                }],\n            },\n\n        );\n    }\n\n    const bodyConfirmPost = (\n        <div style={modalStyle} className={classes.paper}>\n            <Typography>Are you sure you want to reset?</Typography>\n            <div className={classes.confirmButtons}>\n                <Button\n                    onClick={handleModalNo}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    className={classes.button}\n                >\n                    No\n      </Button>\n                <Button\n                    onClick={handleModalYes}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    className={classes.button}\n                >\n                    Yes\n      </Button>\n            </div>\n        </div>\n    );\n\n\n    return (\n        <div className={classes.root}>\n            <Button\n                onClick={redirectToManage}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"medium\"\n                className={classes.buttonBack}\n                startIcon={< ArrowBackIcon />}\n            >\n                Back\n      </Button>\n            <Stepper className={classes.stepper} activeStep={activeStep} orientation=\"vertical\">\n                {steps.map((label, index) => (\n                    <Step key={label}>\n                        <StepLabel>{label}</StepLabel>\n                        <StepContent>\n                            <div>{getStepContent(index)}</div>\n                            <div className={classes.actionsContainer}>\n                                <div>\n                                    <Button\n                                        disabled={activeStep === 0}\n                                        onClick={handleBack}\n                                        className={classes.button}\n                                    >\n                                        Back\n                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        onClick={handleNext}\n                                        className={classes.button}\n                                    >\n                                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n                                    </Button>\n                                </div>\n                            </div>\n                        </StepContent>\n                    </Step>\n                ))}\n            </Stepper>\n            {activeStep === steps.length && (\n                <Paper square elevation={0} className={classes.resetContainer}>\n                    <Typography>All Steps Completed</Typography>\n                    <div className={classes.actionsContainer}>\n                        <Button onClick={handleReset} className={classes.button}>\n                            Reset\n            </Button>\n                        <Button variant=\"contained\"\n                            color=\"primary\"\n                            onClick={handleSubmit} className={classes.button}>\n                            Submit\n            </Button>\n                        {\n                            alert.eventCreated ? (\n                                <div className={classes.alert}><Alert severity=\"success\">New event has been created.</Alert></div>\n                            ) : null\n                        }\n                        {\n                            alert.internalBackendError ? (\n                                <div className={classes.alert}><Alert severity=\"error\">Ooops! Something went wrong, try again later.</Alert></div>\n                            ) : null\n                        }\n                        {\n                            alert.dateInPast ? (\n                                <div className={classes.alert}><Alert severity=\"error\">You've entered date in the past.</Alert></div>\n                            ) : null\n                        }\n                        {\n                            alert.pleaseLogin ? (\n                                <div className={classes.alert}><Alert severity=\"error\">Please login to create event.</Alert></div>\n                            ) : null\n                        }\n                    </div >\n                </Paper >\n            )}\n            <Modal\n                open={openModal}\n                onClose={handleModalClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {bodyConfirmPost}\n            </Modal>\n        </div >\n    )\n};\n\nexport default CreateEvent;","/Users/joannanapora/forest-run/src/pages/notice-board/articles/notice-board.container.tsx",[],"/Users/joannanapora/forest-run/src/pages/manage/delete-event/delete-event.container.tsx",["273"],"import React, { Dispatch, useState, SetStateAction, useEffect } from 'react';\n\nimport { useDeleteEventStyles } from './delete-event.styles';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Button, Typography } from '@material-ui/core';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Modal from '@material-ui/core/Modal';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { withRouter } from 'react-router-dom';\n\nimport { GET_EVENTS, DELETE_EVENT } from '../../../grapQL';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\n\nimport { format } from 'date-fns';\nimport CircularIndeterminate from '../../../shared/spinner.component';\n\ninterface IAllAlerts {\n    eventDeleted: boolean;\n    internalBackendError: boolean;\n    pleaseLogIn: boolean;\n}\n\nconst DeleteEvent = ({ history }) => {\n    const classes = useDeleteEventStyles();\n\n    const [articleState, setArticleStateState] = useState(null);\n    const [modalStyle] = useState(getModalStyle);\n    const [openModal, setOpenModal]: [boolean, Dispatch<SetStateAction<boolean>>] = useState(false);\n    const [alert, setAlert]: [IAllAlerts, Dispatch<SetStateAction<IAllAlerts>>] = useState(\n        {\n            internalBackendError: false,\n            pleaseLogIn: false,\n            eventDeleted: false,\n        }\n    );\n\n    useEffect(() => {\n        refetch()\n    }, []);\n\n\n    const { loading, error, data, refetch } = useQuery(GET_EVENTS, {\n        variables: { filters: { me: true } },\n        onCompleted: (result) => {\n            let articlesStateObj = {};\n\n            result.events.forEach(event => {\n                articlesStateObj[event.id] = false;\n            });\n\n            setArticleStateState(articlesStateObj);\n        },\n        onError: (error) => {\n            if ((error.graphQLErrors[0].message as any).statusCode === 500) {\n                setAlert({ ...alert, internalBackendError: true });\n            }\n            if ((error.graphQLErrors[0].message) === \"Cannot read property 'sub' of undefined\") {\n                setAlert({ ...alert, pleaseLogIn: true })\n            }\n        }\n    });\n\n\n    const [deleteEvent] = useMutation(DELETE_EVENT, {\n        onError: (e) => {\n            if ((e.graphQLErrors[0].message as any).statusCode === 500) {\n                setAlert({ ...alert, internalBackendError: true });\n            }\n            if ((e.graphQLErrors[0].message) === \"Cannot read property 'sub' of undefined\") {\n                setAlert({ ...alert, pleaseLogIn: true })\n            }\n        },\n        onCompleted: () => {\n            setOpenModal(false);\n            refetch();\n            setAlert({ ...alert, eventDeleted: true });\n        }\n    });\n\n\n    if (error) {\n        return (\n            <div className={classes.alert}><Alert severity=\"error\">Ooops! Try again later.</Alert></div>)\n    }\n\n    function rand() {\n        return Math.round(Math.random() * 20) - 10;\n    };\n\n    function getModalStyle() {\n        const top = 50 + rand();\n        const left = 50 + rand();\n\n        return {\n            top: `${top}%`,\n            left: `${left}%`,\n            transform: `translate(-${top}%, -${left}%)`,\n        };\n    };\n\n\n    let listOfObjectsToDelete = [];\n\n    const handleYes = () => {\n\n        for (const eventId in articleState) {\n            if (articleState[eventId] === true) {\n                listOfObjectsToDelete.push(eventId)\n            }\n        }\n        deleteEvent(\n            {\n                variables: {\n                    ids: listOfObjectsToDelete\n                },\n                refetchQueries: [{\n                    query: GET_EVENTS,\n                    variables: {\n                        filters: {\n                            me: false,\n                        }\n                    }\n                }],\n            }\n        );\n    };\n    const handleNo = () => {\n        setOpenModal(false);\n    };\n\n    const redirectToManage = () => {\n        if (history) {\n            history.push('/manage/')\n        }\n    };\n\n\n    const handleModalClose = () => {\n        setOpenModal(false);\n    };\n\n\n    const bodyConfirmDelete = (\n        <div style={modalStyle} className={classes.paper}>\n            <Typography>Are you sure you want to delete?</Typography>\n            <div className={classes.confirmButtons}>\n                <Button\n                    onClick={handleNo}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    className={classes.button}\n                >\n                    No\n      </Button>\n                <Button\n                    onClick={handleYes}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    size=\"small\"\n                    className={classes.button}\n                >\n                    Yes\n      </Button>\n            </div>\n        </div>\n    );\n\n\n    const handleDeleteButton = () => {\n        setOpenModal(true);\n    };\n\n\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>, id: string) => {\n        setArticleStateState({ ...articleState, [id]: event.target.checked });\n    };\n\n    let checkIfDisableButton = true;\n\n    for (const eventId in articleState) {\n        if (articleState[eventId] === true) {\n            checkIfDisableButton = false\n        }\n    }\n\n    return (\n        <div className={classes.container} >\n            <Button\n                onClick={redirectToManage}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"medium\"\n                className={classes.buttonBack}\n                startIcon={< ArrowBackIcon />}\n            >\n                Back\n      </Button>\n            {\n                !data || loading ?\n                    <CircularIndeterminate />\n                    :\n                    <div className={classes.checkboxes}>\n                        {alert.internalBackendError ? (\n                            <Alert severity=\"error\">Ooops! Something went wrong, try again later.</Alert>\n                        ) : null}\n                        {alert.pleaseLogIn ? (\n                            <Alert severity=\"warning\">Please log in to delete event.</Alert>\n                        ) : null}\n                        {alert.eventDeleted ? (\n                            <Alert severity=\"success\">Event/s has been deleted.</Alert>\n                        ) : null}\n\n                        <FormGroup>\n                            {\n                                articleState ?\n                                    data?.events?.map((event) => {\n                                        return (\n                                            <FormControlLabel key={event.id}\n                                                control={\n                                                    <Checkbox\n                                                        checked={articleState[event.id]}\n                                                        onChange={(e) => handleChange(e, event.id)}\n                                                        name={event.id}\n                                                        color=\"primary\"\n                                                    />\n                                                }\n\n                                                label={\n                                                    <div className={classes.articlesFormLabel}>\n                                                        <div className={classes.date}>\n                                                            {format(new Date(event.date), 'dd/MM/yyyy')}\n                                                        </div>\n                                                        <div>\n                                                            {event.location}\n                                                        </div>\n                                                    </div>\n                                                }\n\n                                            />\n                                        )\n                                    }) : null\n                            }\n                        </FormGroup>\n                    </div>}\n            <Button\n                onClick={handleDeleteButton}\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n                disabled={data?.events?.length < 1 || checkIfDisableButton}\n            >\n                DELETE\n      </Button>\n            <Modal\n                open={openModal}\n                onClose={handleModalClose}\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n            >\n                {bodyConfirmDelete}\n            </Modal>\n        </div>\n    )\n};\n\nexport default withRouter(DeleteEvent);","/Users/joannanapora/forest-run/src/pages/events/event-card/event.component.tsx",[],"/Users/joannanapora/forest-run/src/pages/login/sign-in-sign-up/sign-in-up.component.tsx",[],"/Users/joannanapora/forest-run/src/pages/manage/create-post/create-post.container.tsx",[],"/Users/joannanapora/forest-run/src/pages/events/event-list/event-list.component.tsx",["274"],"import React, { Dispatch, SetStateAction, useState, useEffect } from 'react';\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport UpcomingEvent from '../event-card/event.component';\nimport { Grid, Switch, Paper, Fade, Button, IconButton, Typography } from '@material-ui/core';\n\nimport { mapWhenToOptions } from '../../../models/when.enum';\nimport { useEventListStyles } from './event-list.styles';\n\nimport { format } from 'date-fns';\n\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport SortIcon from '@material-ui/icons/Sort';\nimport Alert from '@material-ui/lab/Alert';\n\nimport { selectCurrentUser } from '../../../store-redux/user/user.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport { IUser } from '../../../store-redux';\nimport { connect } from 'react-redux';\n\nimport { GET_EVENTS, ASSIGN_TO_EVENT, UNASSIGN_TO_EVENT } from '../../../grapQL';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\n\nimport CircularIndeterminate from '../../../shared/spinner.component';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\n\ninterface IAlerts {\n    pleaseLogin: boolean;\n    joined: boolean;\n    left: boolean;\n    internalBackendError: boolean;\n}\n\ninterface IFilters {\n    distance: string;\n    joined: boolean;\n    popular: string;\n}\n\nconst EventList = ({ user }: { user: IUser }) => {\n    const classes = useEventListStyles();\n    const [checked, setChecked]: [boolean, Dispatch<SetStateAction<boolean>>] = useState(false);\n    const [isClicked, setIsClicked]: [boolean, Dispatch<SetStateAction<boolean>>] = useState(false);\n    const [filter, setFilter]: [IFilters, Dispatch<SetStateAction<IFilters>>] = useState({\n        distance: \"\",\n        popular: \"\",\n        joined: false,\n    });\n\n    useEffect(() => {\n        refetch()\n    }, [filter])\n\n\n    const [alert, setAlert]: [IAlerts, Dispatch<SetStateAction<IAlerts>>] = useState({\n        pleaseLogin: false,\n        joined: false,\n        left: false,\n        internalBackendError: false,\n    });\n\n    let { loading, error, data, refetch } = useQuery(GET_EVENTS, {\n        variables: {\n            filters: {\n                me: false,\n                participateCounter: filter.popular,\n                distance: filter.distance,\n                joined: filter.joined,\n            }\n        },\n    },\n    );\n\n    const [assignToEvent] = useMutation(ASSIGN_TO_EVENT, {\n        onCompleted: () => {\n            refetch();\n            setAlert({ ...alert, joined: true, left: false })\n\n        },\n        onError: (error) => {\n            if ((error.graphQLErrors[0].message) === \"Cannot read property 'sub' of undefined\") {\n                setAlert({ ...alert, pleaseLogin: true })\n            }\n            if ((error.graphQLErrors[0].message as any).statusCode === 500) {\n                setAlert({ ...alert, internalBackendError: true })\n            }\n        }\n    });\n\n    const [unassignToEvent] = useMutation(UNASSIGN_TO_EVENT, {\n        onCompleted: () => {\n            refetch();\n            setAlert({ ...alert, left: true, joined: false })\n        },\n        onError: (error) => {\n            if ((error.graphQLErrors[0].message) === \"Cannot read property 'sub' of undefined\") {\n                setAlert({ ...alert, pleaseLogin: true })\n            }\n            if ((error.graphQLErrors[0].message as any).statusCode === 500) {\n                setAlert({ ...alert, internalBackendError: true })\n            }\n        }\n    });\n\n    if (error) {\n        return (\n            <div className={classes.alert}><Alert severity=\"error\">Ooops! Try again later.</Alert></div>)\n    };\n\n    const handleChange = (prev: React.ChangeEvent<HTMLInputElement>) => {\n        setChecked((prev) => !prev);\n        setAlert({\n            ...alert,\n            pleaseLogin: false,\n            joined: false,\n            left: false,\n        })\n    };\n\n    const handleDistance = () => {\n\n        setFilter({\n            distance: filter.distance !== \"DESC\" ? \"DESC\" : \"ASC\",\n            popular: undefined,\n            joined: null\n        });\n        setAlert({\n            ...alert,\n            pleaseLogin: false,\n            joined: false,\n            left: false,\n        })\n    };\n\n    const handlePopular = () => {\n        setFilter({\n            popular: filter.popular !== \"DESC\" ? \"DESC\" : \"ASC\",\n            distance: undefined,\n            joined: null,\n        });\n        setAlert({\n            ...alert,\n            pleaseLogin: false,\n            joined: false,\n            left: false,\n        })\n    };\n\n    const handleJoined = () => {\n        setFilter({\n            ...filter, joined: !filter.joined,\n        });\n        setAlert({\n            ...alert,\n            pleaseLogin: false,\n            joined: false,\n            left: false,\n        })\n    };\n\n\n    const handleClickToJoin = (eventId, isAssigned) => {\n        setIsClicked(!isClicked);\n\n        if (!isAssigned) {\n            assignToEvent(\n                {\n                    variables: {\n                        eventId: eventId\n                    },\n                },\n            );\n        }\n        else {\n            unassignToEvent(\n                {\n                    variables: {\n                        eventId: eventId\n                    },\n                }\n            );\n        }\n\n    }\n\n    return (\n        <div className={classes.eventListPage}>\n            <div className={classes.rootfilters}>\n                <FormControlLabel\n                    control={<Switch color=\"primary\"\n                        checked={checked} onChange={handleChange} />}\n                    label={checked ? '' : 'filters'}\n                />\n                <div className={classes.container}>\n                    <Fade in={checked}>\n                        <Paper elevation={4} className={classes.paper}>\n                            <Button\n                                variant=\"contained\"\n                                color={filter.distance ? \"primary\" : \"secondary\"}\n                                size=\"small\"\n                                className={classes.button}\n                                startIcon={<SortIcon />}\n                                onClick={handleDistance}\n                            >\n                                Miles\n      </Button>\n                            <Button\n                                variant=\"contained\"\n                                color={filter.popular ? \"primary\" : \"secondary\"}\n                                size=\"small\"\n                                className={classes.button}\n                                startIcon={<SortIcon />}\n                                onClick={handlePopular}\n                            >\n                                Popular\n      </Button>\n                            <Button\n                                variant=\"contained\"\n                                color={filter.joined ? \"primary\" : \"secondary\"}\n                                size=\"small\"\n                                className={classes.button}\n                                startIcon={filter.joined ? <CheckBoxIcon /> : <CheckBoxOutlineBlankIcon />}\n                                onClick={handleJoined}\n                            >\n                                Joined\n                            </Button>\n                        </Paper>\n                    </Fade>\n                </div>\n            </div>\n            {\n                !data || loading ?\n                    <CircularIndeterminate />\n                    :\n                    <Grid item xs={12}>\n                        {\n                            alert.pleaseLogin ?\n                                <div className={classes.mutationAlert}><Alert severity=\"warning\">Please login to join the event.</Alert></div>\n                                : null\n                        }\n                        {\n                            alert.joined ?\n                                <div className={classes.mutationAlert}><Alert severity=\"success\">You have joined the event.</Alert></div>\n                                : null\n                        }\n                        {\n                            alert.left ?\n                                <div className={classes.mutationAlert}><Alert severity=\"error\">You have left the event.</Alert></div>\n                                : null\n                        }\n                        <Grid container justify=\"space-evenly\" spacing={2}>\n                            {\n                                data?.events.length < 1 && filter.joined ?\n                                    <div className={classes.mutationAlert}><Typography>There are no events here.</Typography></div>\n                                    :\n                                    null\n                            }\n                            {\n                                data?.events.length < 1 && !filter.joined ?\n                                    <div className={classes.mutationAlert}><Typography>There are no upcoming events.</Typography></div>\n                                    :\n                                    null\n                            }\n                            {\n                                data?.events?.map((event) => {\n                                    return (<Grid key={event.id} item>\n                                        <UpcomingEvent\n                                            location={event.location}\n                                            distance={event.distance}\n                                            image=\"https://cdn.dribbble.com/users/1016207/screenshots/6380353/58.jpg?compress=1&resize=400x300\"\n                                            description={event.description}\n                                            date={format(new Date(event.date), 'dd/MM/yyyy')}\n                                            organizerName={event.organizerName}\n                                            organizerPhoneNumber={event.organizerPhoneNumber}\n                                            meetingPoint={event.meetingPoint}\n                                            time={new Date(Number(event.time)).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                                            when={mapWhenToOptions(event.when)}\n                                            counter={event.participateCounter}\n                                            action={event.isAssign ?\n                                                <IconButton onClick={() => handleClickToJoin(event.id, event.isAssign)} aria-label=\"settings\">\n                                                    < PeopleAltIcon color='primary' />\n                                                </IconButton>\n                                                :\n                                                <IconButton onClick={() => handleClickToJoin(event.id, event.isAssign)} aria-label=\"settings\">\n                                                    < PersonAddIcon color='secondary' />\n                                                </IconButton>}\n                                        />\n                                        {event.isAssign ?\n                                            isClicked : !isClicked}\n                                    </Grid>\n                                    )\n                                })\n                            }\n                        </Grid>\n                    </Grid>\n            }\n        </div>\n    );\n}\n\nconst mapStateToProps = createStructuredSelector({\n    user: selectCurrentUser,\n});\n\n\nexport default connect(\n    mapStateToProps,\n    null)\n    (EventList);","/Users/joannanapora/forest-run/src/pages/landing/timelines/timelines.component.tsx",[],"/Users/joannanapora/forest-run/src/store-redux/user/user.types.ts",[],"/Users/joannanapora/forest-run/src/store-redux/index.ts",[],"/Users/joannanapora/forest-run/src/pages/landing/timelines/timelines.styles.ts",[],"/Users/joannanapora/forest-run/src/grapQL/user/user.mutation.ts",[],"/Users/joannanapora/forest-run/src/shared/spinner.component.tsx",[],"/Users/joannanapora/forest-run/src/store-redux/user/user.actions.ts",[],"/Users/joannanapora/forest-run/src/grapQL/index.ts",[],"/Users/joannanapora/forest-run/src/grapQL/event/event.query.ts",[],"/Users/joannanapora/forest-run/src/grapQL/event/event.mutation.ts",[],"/Users/joannanapora/forest-run/src/grapQL/post/post.query.tsx",[],"/Users/joannanapora/forest-run/src/grapQL/user/user.graphql.ts",[],"/Users/joannanapora/forest-run/src/grapQL/post/post.mutation.ts",[],"/Users/joannanapora/forest-run/src/pages/events/event-list/event-list.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/login/sign-in-sign-up/sign-in-up.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/manage/create-post/create-post.styles.ts",[],"/Users/joannanapora/forest-run/src/models/when.enum.ts",[],"/Users/joannanapora/forest-run/src/axios/image.api.ts",[],"/Users/joannanapora/forest-run/src/pages/events/event-card/event.styles.tsx",[],"/Users/joannanapora/forest-run/src/shared/spinner-button.component.tsx",["275"],"import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { green } from '@material-ui/core/colors';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        wrapper: {\n            margin: theme.spacing(2),\n            position: 'relative',\n            display: 'flex',\n            justifyContent: 'center'\n        },\n        buttonProgress: {\n            color: green[500],\n            position: 'absolute',\n            top: '60%',\n            left: '50%',\n            marginTop: -12,\n            marginLeft: -12,\n        },\n    }),\n);\n\nconst SpinnerButton = ({ buttonLabel, onClick, loading, ...props }) => {\n    const classes = useStyles();\n    const timer = React.useRef<number>();\n\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(timer.current);\n        };\n    }, []);\n\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.wrapper}>\n                {<Button\n                    {...props}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={loading}\n                    onClick={onClick}\n                >\n                    {buttonLabel}\n                </Button>}\n                {loading && <CircularProgress size={24} className={classes.buttonProgress} />}\n            </div>\n        </div>\n    );\n};\n\nexport default SpinnerButton;","/Users/joannanapora/forest-run/src/pages/login/sign-up/sign-up.container.tsx",[],"/Users/joannanapora/forest-run/src/pages/login/sign-in/sign-in.container.tsx",[],"/Users/joannanapora/forest-run/src/pages/manage/delete-event/delete-event.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/notice-board/articles/notice-board.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/manage/create-event/create-event.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/manage/delete-post/delete-post.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/manage/manage.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/donate/donate.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/notice-board/search-post/search-post.component.tsx",[],"/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-image/event-image.component.tsx",["276","277"],"/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-meetpoint/event-details.component.tsx",[],"/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-details/event-info.component.tsx",[],"/Users/joannanapora/forest-run/src/stripe/stripe.component.tsx",[],"/Users/joannanapora/forest-run/src/pages/login/sign-in/sign-in.styles.ts",[],"/Users/joannanapora/forest-run/src/shared/email-validation.ts",["278","279"],"export const validateEmail = (email: string): boolean => {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n};","/Users/joannanapora/forest-run/src/pages/login/sign-up/sign-up.styles.ts",[],"/Users/joannanapora/forest-run/src/shared/password-validation.ts",[],"/Users/joannanapora/forest-run/src/nav/user-area/user-area.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/notice-board/search-post/search-post.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-details/event-info.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-meetpoint/event-details.styles.ts",[],"/Users/joannanapora/forest-run/src/pages/manage/create-event/new-event/event-image/event-image.styles.ts",[],{"ruleId":"280","replacedBy":"281"},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","severity":1,"message":"285","line":43,"column":8,"nodeType":"286","endLine":43,"endColumn":10,"suggestions":"287"},{"ruleId":"288","severity":1,"message":"289","line":149,"column":15,"nodeType":"290","messageId":"291","endLine":149,"endColumn":22},{"ruleId":"284","severity":1,"message":"285","line":44,"column":8,"nodeType":"286","endLine":44,"endColumn":10,"suggestions":"292"},{"ruleId":"284","severity":1,"message":"285","line":55,"column":8,"nodeType":"286","endLine":55,"endColumn":16,"suggestions":"293"},{"ruleId":"284","severity":1,"message":"294","line":35,"column":32,"nodeType":"290","endLine":35,"endColumn":39},{"ruleId":"288","severity":1,"message":"295","line":5,"column":10,"nodeType":"290","messageId":"291","endLine":5,"endColumn":16},{"ruleId":"288","severity":1,"message":"296","line":5,"column":18,"nodeType":"290","messageId":"291","endLine":5,"endColumn":29},{"ruleId":"297","severity":1,"message":"298","line":2,"column":26,"nodeType":"299","messageId":"300","endLine":2,"endColumn":27,"suggestions":"301"},{"ruleId":"297","severity":1,"message":"298","line":2,"column":51,"nodeType":"299","messageId":"300","endLine":2,"endColumn":52,"suggestions":"302"},"no-native-reassign",["303"],"no-negated-in-lhs",["304"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["305"],"@typescript-eslint/no-unused-vars","'newDate' is assigned a value but never used.","Identifier","unusedVar",["306"],["307"],"The ref value 'timer.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'timer.current' to a variable inside the effect, and use that variable in the cleanup function.","'Button' is defined but never used.","'FormControl' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["308","309"],["310","311"],"no-global-assign","no-unsafe-negation",{"desc":"312","fix":"313"},{"desc":"312","fix":"314"},{"desc":"315","fix":"316"},{"messageId":"317","fix":"318","desc":"319"},{"messageId":"320","fix":"321","desc":"322"},{"messageId":"317","fix":"323","desc":"319"},{"messageId":"320","fix":"324","desc":"322"},"Update the dependencies array to be: [refetch]",{"range":"325","text":"326"},{"range":"327","text":"326"},"Update the dependencies array to be: [filter, refetch]",{"range":"328","text":"329"},"removeEscape",{"range":"330","text":"331"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"332","text":"333"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"334","text":"331"},{"range":"335","text":"333"},[1524,1526],"[refetch]",[1533,1535],[1953,1961],"[filter, refetch]",[84,85],"",[84,84],"\\",[109,110],[109,109]]